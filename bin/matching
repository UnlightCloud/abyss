#!/usr/bin/env ruby

# Unlight
# Copyright (c) 2019 CPA
# Copyright (c) 2019 Open Unlight
# This software is released under the Apache 2.0 License.
# https://opensource.org/licenses/Apache2.0

require 'bundler'
$LOAD_PATH.unshift Bundler.root.join('lib')
$LOAD_PATH.unshift Bundler.root.join('src')

require 'bootstrap'
require 'protocol/matchserver'

# TODO: Use single boot server entrypoint by type
ARGV.push('-t matching')

module Unlight
  include Protocol

  @@current_time = 0

  Dawn::Bootstrap.new(MatchServer, Dawn::Server.id, Dawn::Server.hostname, Dawn::Server.port).start do
    EM::PeriodicTimer.new(CPU_POP_TIME) do
      h = Time.now.utc.hour
      if @@current_time != h
        c = CPU_SPAWN_NUM[h]
        c.times { MatchController.cpu_room_update }
        @@current_time = h
      end
    rescue StandardError => e
      Dawn.logger.fatal('Pop CPU failed', e)
    end

    EM::PeriodicTimer.new(60) do
      MatchServer.check_boot
      MatchServer.update_login_count
    rescue StandardError => e
      Dawn.logger.fatal('Check boot failed', e)
    end

    EM::PeriodicTimer.new(60 / GAME_CHECK_CONNECT_INTERVAL) do
      MatchServer.check_connection_sec
    rescue StandardError => e
      Dawn.logger.fatal('Check connection failed', e)
    end

    EM::PeriodicTimer.new(5) do
      MatchServer.radder_match_update
    rescue StandardError => e
      Dawn.logger.fatal('Radder match update failed', e)
    end

    EM::PeriodicTimer.new(RADDER_CPU_POP_TIME) do
      MatchController.cpu_radder_match_update if RADDER_CPU_POP_ENABLE && rand(RADDER_CPU_POP_RAND).zero?
    rescue StandardError => e
      Dawn.logger.fatal('Radder CPU POP failed', e)
    end
  end
end
